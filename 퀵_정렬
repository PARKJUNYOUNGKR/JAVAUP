package univ;
import java.util.Scanner;
import java.util.StringTokenizer;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
public class Main996 {

	public static void main(String[] args) throws IOException {
		Scanner sc = new Scanner(System.in);
		BufferedReader in = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(in.readLine());
		int N = Integer.parseInt(st.nextToken());
		int K = Integer.parseInt(st.nextToken());
		st = new StringTokenizer(in.readLine());
		
		int A[] = new int[N];
		for(int i=0;i<N;i++) {
			A[i] = Integer.parseInt(st.nextToken());
		}
		quickSort(A,0,N-1,K-1);
		System.out.println(A[K-1]);
	}

	public static void quickSort(int A[], int S, int E, int K) {
		if(S<E) {
			int pivot = partition(A,S,E);
			if(pivot == K)
				return;
			else if(K<pivot)
				quickSort(A,S,pivot-1,K);
			else
				quickSort(A,pivot+1,E,K);
		}
		
	}

	public static int partition(int A[], int S, int E) {
		if(S+1 == E) {
			if(A[S] > A[E])swap(A,S,E);
			return E;
			
		}
		int M = (S+E) / 2;
		swap(A,S,M);
		int pivot = A[E];
		int i = S,j=E-1;
		while(i<=j) {
			while(pivot<A[j]&&j>0) {
				j--;
			}
			while(pivot>A[i]&&i<A.length) {
				i++;
			}
			if(i<=j) {
				swap(A,i++,j--);
			}
		}
		A[E] = A[i];
		A[i] = pivot;
		return i;
	}

public static void swap(int A[], int i, int j) {
		int temp = A[i];
		A[i] = A[j];
		A[j] = temp;
	}
}

